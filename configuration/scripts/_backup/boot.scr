echo "@TDA: --------------- Boot script begin ---------------"

setenv initrd_high 0x66000000



setenv result_true                  0
setenv result_false                 1
setenv result_none                  2
setenv result                       ${result_none}

setenv mode_none                    0
setenv mode_kernel                  1
setenv mode_xen                     2
setenv mode_abi                     3
setenv mode_poweroff                9



setenv boot_device                  ${devtype} ${devnum}:${distro_bootpart}

setenv xen_location                 /boot/xen-4.16.2.uimg
setenv kernel_location              /boot/kernel-5.19.uimg
setenv ramdisk_location             /boot/rootfs-2022.05.2.cpio.uimg
setenv fdt_location                 /boot/dtb.dtb
setenv abi_location                 /boot/boot_aosp.img

setenv xen_address                  ${kernel_addr_r}
setenv kernel_address               ${kernel_addr_r}
setenv ramdisk_address              ${ramdisk_addr_r}
# setenv fdt_address                  ${fdt_addr_r}
setenv fdt_address                  ${fdt_addr}
setenv abi_address                  ${kernel_addr_r}

setenv fdt_address                  0x40000000
setenv xen_address                  0x41000000
setenv kernel_address               0x42000000
setenv ramdisk_address              0x46000000
setenv abi_address                  0x42000000



setenv bootargs_debug               "earlyprintk=serial,ttyAMA0 loglevel=7 debug printk.devkmsg=on drm.debug=0x0 nokaslr"
setenv bootargs_console             "console=ttyAMA0"
setenv bootargs_root                "root=/dev/${devtype}blk${devnum}p${distro_bootpart} rw"
setenv bootargs_root                "root=/dev/ram rw"
setenv bootargs_kernel              ${bootargs} ${bootargs_debug} ${bootargs_console}
setenv bootargs_xen                 "earlyprintk=serial,ttyAMA0 console=ttyAMA0,115200n8 earlycon=xenboot loglvl=all guest_loglvl=all"
setenv bootargs                     ${bootargs_kernel}



if env exists boot_count; then
   echo "@TDA: boot_count found"
else
   setenv boot_count 0
fi
setexpr boot_count ${boot_count} + 1
echo "@TDA: boot_count = ${boot_count}"
env save




# Command 'command_size' calculates file size.
# Next variables must be defined
#     _location_  - absolute file path on device
#     _device_    - device where file is placed
#     _name_      - short file name used for debug messages (optional)
# Next variables will be defined:
#     _size_      - will contain calculated size
#     result      - run command result
# Example:
#     setenv _name_ kernel
#     setenv _device_ ${boot_device}
#     setenv _location_ ${kernel_location}
#     run command_size
#     setenv kernel_size ${_size_}
setenv command_size '
   echo "@TDA: calcilating "${_device_}\${_location_}" (${_name_}) size...";
   if size ${_device_} ${_location_} ; then
      setenv _size_ 0x${filesize};
      setenv errno ${result_true};
      echo "@TDA: ... "${_device_}\${_location_}" (${_name_}) calculated size (${_size_})";
   else;
      echo "@TDA: calculate size error";
      setenv _size_ 0x0;
      setenv errno ${result_false};
      echo "@TDA: ... "${_device_}\${_location_}" (${_name_}) calculate size error";
   fi
'


# Command 'command_size_name' calculates file size.
# Next variables must be defined
#     _device_    - device where file is placed
#     _name_      - short file name used for debug messages and obtaining
#                   absolute file path on device and load address according to convention:
#                       - variable witn name '${_name_}_location' must be defined and contain valid absolute file path on device
# Next variables will be defined:
#     _size_      - will contain calculated size
#     ${_name_}_location - this variable will be defined according to convention and will contain calculated size
#     result      - run command result
# Example:
#     setenv ${kernel_location} /boot/kernel
#
#     setenv _name_ kernel
#     setenv _device_ ${boot_device}
#     run command_size_name
setenv command_size_name '
   env indirect _location_ ${_name_}_location;
   run command_size;
   env indirect ${_name_}_size _size_;
'



# Command 'command_size_names' calculates files sizes.
# Next variables must be defined
#     _device_    - device where file is placed
#     _names_     - short file names list used for calling 'command_load_name'
# Next variables will be defined:
#     result      - run command result
#     ${_name_}_location - list of variables will be defined according to convention and will contain calculated sizes
# Example:
#     setenv kernel_location /boot/kernel
#     setenv ramdisk_location /boot/ramdisk
#     setenv fdt_location /boot/fdt
#
#     setenv _names_ kernel ramdisk fdt
#     setenv _device_ ${boot_device}
#     run command_size_names
setenv command_size_names '
   for tmp_name in ${_names_}; do
      setenv _name_ ${tmp_name};
      run command_size_name;
   done
'



# Command 'command_load' loads file to RAM.
# Next variables must be defined
#     _location_  - absolute file path on device
#     _device_    - device where file is placed
#     _address_   - RAM address where file will be loaded 
#     _name_      - short file name used for debug messages (optional)
# Next variables will be defined:
#     result      - run command result
# Example:
#     setenv _name_ kernel
#     setenv _device_ ${boot_device}
#     setenv _location_ ${kernel_location}
#     setenv _address_ ${kernel_address}
#     run command_load
setenv command_load '
   echo "@TDA: loading "${_device_}\${_location_}" (${_name_}) to ${_address_}...";
   if load ${_device_} ${_address_} ${_location_} ; then
      setenv result ${result_true};
      echo "@TDA: ... "${_device_}\${_location_}" (${_name_}) loaded";
   else;
      setenv result ${result_false};
      echo "@TDA: ... "${_device_}\${_location_}" (${_name_}) load error";
   fi
'



# Command 'command_load_name' loads file to RAM.
# Next variables must be defined
#     _device_    - device where file is placed
#     _name_      - short file name used for debug messages and obtaining
#                   absolute file path on device and load address according to convention:
#                       - variable witn name '${_name_}_location' must be defined and contain valid absolute file path on device
#                       - variable witn name '${_name_}_address' must be defined and contain valid RAM address to be loaded
# Next variables will be defined:
#     result      - run command result
# Example:
#     setenv kernel_location /boot/kernel
#     setenv kernel_address 0x45000000
#
#     setenv _name_ kernel
#     setenv _device_ ${boot_device}
#     run command_load_name
setenv command_load_name '
   env indirect _location_ ${_name_}_location;
   env indirect _address_ ${_name_}_address;
   run command_load;
'



# Command 'command_load_names' loads files to RAM.
# Next variables must be defined
#     _device_    - device where file is placed
#     _names_     - short file names list used for calling 'command_load_name'
# Next variables will be defined:
#     result      - run command result
# Example:
#     setenv kernel_location /boot/kernel
#     setenv kernel_address 0x45000000
#     setenv ramdisk_location /boot/ramdisk
#     setenv ramdisk_address 0x41000000
#     setenv fdt_location /boot/fdt
#     setenv fdt_address 0x40000000
#
#     setenv _names_ kernel ramdisk fdt
#     setenv _device_ ${boot_device}
#     run command_load_names
setenv command_load_names '
   for tmp_name in ${_names_}; do
      setenv _name_ ${tmp_name};
      run command_load_name;
   done
'



# Command 'command_print_data' prints all environment and some specified variables
setenv command_print_data '
   echo "@TDA: ---------------- Begin Data ----------------";
   printenv;
   echo "@TDA: fdt_address       = ${fdt_address}";
   echo "@TDA: scriptaddr        = ${scriptaddr}";
   echo "@TDA: xen_address       = ${xen_address}";
   echo "@TDA: kernel_address    = ${kernel_address}";
   echo "@TDA: ramdisk_address   = ${ramdisk_address}";
   echo "@TDA: abi_address       = ${abi_address}";
   echo "@TDA: bootargs          = ${bootargs}";
   echo "@TDA: loadaddr          = ${loadaddr}";
   echo "@TDA: fdtaddr           = ${fdtaddr}";

   echo "@TDA: fdt_size          = ${fdt_size}";
   echo "@TDA: xen_size          = ${xen_size}";
   echo "@TDA: kernel_size       = ${kernel_size}";
   echo "@TDA: ramdisk_size      = ${ramdisk_size}";
   echo "@TDA: abi_size          = ${abi_size}";
   echo "@TDA: ----------------- End Data -----------------";
'



setenv command_boot_xen '
   echo "@TDA: booting xen...";
   if bootm ${xen_address} - ${fdt_address}; then
      echo "@TDA: ... xen booted";
   else;
      echo "@TDA: ... xen boot error";
   fi
'

setenv command_boot_kernel '
   echo "@TDA: booting kernel...";
   if bootm ${kernel_address} ${ramdisk_address} ${fdt_address}; then
      echo "@TDA: ... kernel booted";
   else;
      echo "@TDA: ... kernel boot error";
   fi
'

setenv command_boot_abi '
   echo "@TDA: booting Android Boot Image...";
   if bootm ${abi_address} ${abi_address} ${fdt_address}; then
      echo "@TDA: ... Android Boot Image booted";
   else;
      echo "@TDA: ... Android Boot Image boot error";
   fi
'




setenv _device_ ${boot_device}
setenv _names_ fdt xen kernel ramdisk abi
run command_size_names

run command_print_data



echo "@TDA: Choose mode to boot:"
echo "   ${mode_none}. Boot nothing"
echo "   ${mode_kernel}. Boot Linux Kernel with Ramdisk and Device Tree"
echo "   ${mode_xen}. Boot XEN and Linux Dom-0"
echo "   ${mode_abi}. Boot Android Boot Image"
echo "   ${mode_poweroff}. Poweroff"
askenv mode "Enter boot mode (default [${mode_none}]):"
if env exists mode; then
   echo "@TDA: Chosen mode: ${mode}"
else
   echo "@TDA: Using default choise [${mode_none}]"
   setenv mode ${mode_none};
fi

if itest ${mode_none} == ${mode}; then
   echo "@TDA: Using 'none' mode"
elif itest ${mode_kernel} == ${mode}; then
   echo "@TDA: Using 'kernel' mode"

   setenv _names_ kernel ramdisk fdt
   setenv _device_ ${boot_device}
   run command_load_names

   run command_boot_kernel
elif itest ${mode_xen} == ${mode}; then
   echo "@TDA: Using 'xen' mode"

   setenv _names_ xen kernel ramdisk fdt
   setenv _device_ ${boot_device}
   run command_load_names

   run command_boot_xen
elif itest ${mode_abi} == ${mode}; then
   echo "@TDA: Using 'ABI' mode"

   setenv _names_ abi fdt
   setenv _device_ ${boot_device}
   run command_load_names

   run command_boot_abi
elif itest ${mode_poweroff} == ${mode}; then
   poweroff
else
   echo "@TDA: undefined mode"
fi








setenv _names_ xen kernel ramdisk fdt
setenv _device_ ${boot_device}
run command_load_names



fdt addr ${fdt_address}
fdt resize

fdt mknod / chosen
fdt set /chosen \#address-cells <1>
fdt set /chosen \#size-cells <1>
fdt set /chosen bootargs ${bootargs_xen}

fdt mknod /chosen module@0
fdt set /chosen/module@0 compatible "xen,linux-zimage" "xen,multiboot-module"
fdt set /chosen/module@0 reg <${kernel_address} ${kernel_size}>
fdt set /chosen/module@0 bootargs "earlyprintk=serial,ttyAMA0 console=ttyAMA0,115200n8 earlycon=xenboot"

fdt mknod /chosen module@1
fdt set /chosen/module@1 compatible "xen,linux-initrd" "xen,multiboot-module"
fdt set /chosen/module@1 reg <${ramdisk_address} ${ramdisk_size}>

booti ${xen_address} - ${fdt_address}








echo "@TDA: script commands finished. What is next?"
echo "   0. Continue"
echo "   1. Execute script ones more"
echo "   2. Poweroff"
askenv choise "Enter your choise (default [0]):"
if env exists choise; then
   echo "@TDA: Choise: ${choise}"
else
   echo "@TDA: Using default choise [0]"
   setenv choise 0;
fi

if itest 0 == ${choise}; then
   echo "@TDA: finishing script"
elif itest 1 == ${choise}; then
   source
elif itest 2 == ${choise}; then
   poweroff
else
   echo "@TDA: undefined choise"
   echo "@TDA: finishing script"
fi


echo "@TDA: ---------------- Boot script end -----------------"
